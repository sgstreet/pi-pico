.program half_duplex
.side_set 1 opt

.define public rx_switch rx_start
rx_start:
	set pindirs, 0         ; Set pin to input
	jmp rx_byte            ; No timeout please

.wrap_target
rx_timeout:
	mov x, y               ; Initialize rx timeout

rx_wait:
	jmp x-- rx_check       ; Decrement, jump when more timeout
	irq set 0 rel          ; Timed out, post interrupt
	jmp rx_byte            ; Well timed out, just wait
rx_check:
	jmp pin rx_wait        ; Are we seeing a start bit?, if not count down some more

rx_byte:
	wait 0 pin 0           ; Wait for character
	set x, 7 [7]           ; Preload bit counter, then delay until halfway into the first bit cycle 24 clocks
	nop [7]                ; Need 8 more clocks
	nop [7]                ; Need 8 more clocks
	
rx_bit:
	in pins, 1             ; Shift data bit into ISR
	nop [7]                ; Need 8 more clocks to get to 16 after next instruction
	jmp x-- rx_bit [6]     ; Loop 8 times, each loop iteration is 8 cycles
	jmp pin rx_push        ; Check stop bit (should be high)
	
rx_error:
    irq set 4 rel          ; Either a framing error or a break. Set a sticky flag,
	irq set 0 rel          ; Post error interrupt
	wait 1 pin 0           ; and wait for line to return to idle state.
	jmp rx_timeout         ; Again
	
rx_push:
	push noblock           ; important in case the TX clock is slightly too fast, check FDEBUG_RXSTALL for overrun
.wrap

.define public tx_switch tx_start
tx_start:
	set pindirs, 1 side 1  ; Set pin to output, side set to prevent glitch

.define public tx_idle tx_byte	
tx_byte:
	pull side 1 [7]        ; Assert stop bit, or stall with line in idle state
	nop [7]                ; Need 8 more clocks for 16
	set x, 7 side 0 [7]    ; Preload bit counter, assert start bit for 8 clocks
	nop [7]                ; Need 8 more clocks for 16
	
tx_bit:                    ; This loop will run 8 times (8n1 UART)
	out pins, 1            ; Shift 1 bit from OSR to the first OUT pin
	nop [7]                ; Need 8 more clocks to get to 16 after next instruction
	jmp x-- tx_bit [6]     ; Each loop iteration is 8 cycles.
	jmp tx_byte